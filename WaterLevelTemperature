import numpy as np
import matplotlib.pyplot as plt
from pandas import DataFrame, read_csv
from sklearn.linear_model import LinearRegression

path = 'bottle.csv'
parameters = ['Depthm', 'T_degC']
objective = 'Salnty'


# Read data
def read_data(csv_file):
    csv_df = read_csv(csv_file, usecols=['Depthm','T_degC', 'Salnty'])
    csv_df.fillna(method='ffill', inplace=True)
    csv_df.dropna(inplace=True)
    csv_df = csv_df.head(300)
    print(csv_df)
    return csv_df


# get input x and output y data
def split_data(csv_df):
    x_real = csv_df[parameters]
    y_real = csv_df[objective]
    x = x_real.values
    y = y_real.values.reshape(-1, 1)
    return x_real, x, y


# find w
def find_optimize(x_bar, y):
    """
    input.T: chuyển vị của ma trận input
    np.dot(a,b) : nhân từng phần tử của ma trận a với ma trận b
    np.linalg.pinv(x): tìm giả ngịch đảo/ ngịch đảo của ma trận x
    :param x_bar:
    :return: w
    """
    w = np.dot(np.linalg.pinv(np.dot(x_bar.T, x_bar)), np.dot(x_bar.T, y))
    return w


# get the prediction of each target
def optimize_with_sklearn(x_bar, y):
    regr = LinearRegression(fit_intercept=False)  # fit_intercept = False for calculating the bias
    regr.fit(x_bar, y)
    return regr.coef_, regr.score(x_bar, y)


# find percentage error
# Hàm mất mát
def get_loss_value(x_bar, y, w):
    cost = 0
    y_hat = np.dot(x_bar, w)
    for x, y in zip(y, y_hat):
        print('Real:', x[0], 'Predict:', y[0])
        cost += pow(x[0] - y[0], 2)
    return cost / 2, y_hat.data


# predict for new data
def predict_new_data(x_bar, w):
    # convert to input_bar by adding a column with its value = 1
    one = np.ones((x_bar.shape[0], 1))
    x_bar = np.concatenate((one, x_bar), axis=1)
    return np.dot(x_bar, w)


def main():
    x_real, x, y = split_data(read_data(path))
    one = np.ones((x.shape[0], 1))
    x_bar = np.concatenate((one, x), axis=1)
    output = y
    a = find_optimize(x_bar, output)
    b, c = optimize_with_sklearn(x_bar, output)
    print('y = ax + b')
    print('a: ', a.T)
    print('b: ', b)
    print('Error percent: % .2f' % (c*100))
    diff, y0 = get_loss_value(x_bar, output, a)
    print('Total different between predict and read: ', diff)
    print('Predict salty: ', predict_new_data(np.array([[155, 15]]), a))

    # plot T_degC and depthm
    plt.scatter(x_real[parameters[1]], y)
    plt.xlabel(parameters[1])
    plt.ylabel(objective)
    plt.plot(x, y0, 'r-')

    plt.show()


if __name__ == "__main__": main()
